[Awgcontrol]
section = Settings
group = Awgcontrol
label = Awgcontrol
datatype = DOUBLE
tooltip = <html><body><p>Enable interaction with the AWG. If enabled, the row number is identified based on the digital row ID number set by the AWG. If disabled, every new trigger event is attributed to a new row sequentially.</p><p><b>AWGCONTROL</b></p></body></html>
set_cmd = AWGCONTROL
get_cmd = AWGCONTROL

[Bandwidth]
section = Settings
group = Bandwidth
label = Bandwidth
datatype = DOUBLE
unit = Hz
tooltip = <html><body><p>Set to a value other than 0 in order to apply a low-pass filter with the specified bandwidth to the triggernode signal before applying the trigger criteria. For edge and pulse trigger use a bandwidth larger than the trigger signal`s sampling rate divided by 20 to keep the phase delay. For tracking filter use a bandwidth smaller than the trigger signal`s sampling rate divided by 100 to track slow signal components like drifts. The value of the filtered signal is returned by read() under the path /DEV..../TRIGGER/LOWPASS.</p><p><b>BANDWIDTH</b></p></body></html>
set_cmd = BANDWIDTH
get_cmd = BANDWIDTH

[Bitmask]
section = Settings
group = Bitmask
label = Bitmask
datatype = DOUBLE
tooltip = <html><body><p>Specify a bit mask for the DIO trigger value. The trigger value is bits AND bit mask (bitwise). Only used when the trigger type is digital.</p><p><b>BITMASK</b></p></body></html>
set_cmd = BITMASK
get_cmd = BITMASK

[Bits]
section = Settings
group = Bits
label = Bits
datatype = DOUBLE
tooltip = <html><body><p>Specify the value of the DIO to trigger on. All specified bits have to be set in order to trigger. Only used when the trigger type is digital.</p><p><b>BITS</b></p></body></html>
set_cmd = BITS
get_cmd = BITS

[Buffercount]
section = Control
group = Buffercount
label = Buffercount
datatype = DOUBLE
tooltip = <html><body><p>The number of buffers used internally by the module for data recording.</p><p><b>BUFFERCOUNT</b></p></body></html>
get_cmd = BUFFERCOUNT

[Buffersize]
section = Control
group = Buffersize
label = Buffersize
datatype = DOUBLE
unit = Seconds
tooltip = <html><body><p>The buffersize of the module`s internal data buffers.</p><p><b>BUFFERSIZE</b></p></body></html>
get_cmd = BUFFERSIZE

[Clearhistory]
section = History
group = Clearhistory
label = Clearhistory
datatype = BOOLEAN
tooltip = <html><body><p>Set to 1 to clear all the acquired data from the module. The module immediately resets clearhistory to 0 after it has been set to 1.</p><p><b>CLEARHISTORY</b></p></body></html>
set_cmd = CLEARHISTORY
get_cmd = CLEARHISTORY

[Count]
section = Settings
group = Count
label = Count
datatype = DOUBLE
tooltip = <html><body><p>The number of trigger events to acquire in single-shot mode (when endless is set to 0).</p><p><b>COUNT</b></p></body></html>
set_cmd = COUNT
get_cmd = COUNT

[Delay]
section = Settings
group = Delay
label = Delay
datatype = DOUBLE
unit = Seconds
tooltip = <html><body><p>Time delay of trigger frame position (left side) relative to the trigger edge. delay=0: Trigger edge at left border: delay<0: trigger edge inside trigger frame (pretrigger): delay>0: trigger edge before trigger frame (posttrigger)</p><p><b>DELAY</b></p></body></html>
set_cmd = DELAY
get_cmd = DELAY

[Duration]
section = Settings
group = Duration
label = Duration
datatype = DOUBLE
unit = Seconds
tooltip = <html><body><p>The recording length of each trigger event. This is an input parameter when the sampling mode (grid/mode) is either nearest or linear interpolation. In exact sampling mode duration is an output parameter: it is calculated and set by the module based on the value of grid/cols and the highest rate of all the subscribed signal paths.</p><p><b>DURATION</b></p></body></html>
set_cmd = DURATION
get_cmd = DURATION

[Edge]
section = Settings
group = Edge
label = Edge
datatype = COMBO
tooltip = <html><body><p>The trigger edge to trigger upon when running a triggered acquisition mode.</p><p><ul><li>rising: Rising edge</li><li>falling: Falling edge</li><li>both: Both rising and falling</li></ul></p><p><b>EDGE</b></p></body></html>
cmd_def_1 = 1
combo_def_1 = rising
cmd_def_2 = 2
combo_def_2 = falling
cmd_def_3 = 3
combo_def_3 = both
set_cmd = EDGE
get_cmd = EDGE

[Enable]
section = Control
group = Enable
label = Enable
datatype = BOOLEAN
tooltip = <html><body><p>Set to 1 to enable the module and start data acquisition (is equivalent to calling execute()).</p><p><b>ENABLE</b></p></body></html>
set_cmd = ENABLE
get_cmd = ENABLE

[Endless]
section = Control
group = Endless
label = Endless
datatype = BOOLEAN
tooltip = <html><body><p>Set to 1 to enable endless triggering. Set to 0 and use count if the module should only acquire a certain number of trigger events.</p><p><b>ENDLESS</b></p></body></html>
set_cmd = ENDLESS
get_cmd = ENDLESS

[Eventcount - Mode]
section = Control
group = Eventcount
label = Eventcount - Mode
datatype = COMBO
tooltip = <html><body><p>Specifies the trigger mode when the triggernode is configured as a pulse counter sample value (/DEV..../CNTS/0/SAMPLE.value).</p><p><ul><li>every_sample: Trigger on every sample from the pulse counter, regardless of the counter value.</li><li>incrementing_counter: Trigger on incrementing counter values.</li></ul></p><p><b>EVENTCOUNT/MODE</b></p></body></html>
cmd_def_1 = 0
combo_def_1 = every_sample
cmd_def_2 = 1
combo_def_2 = incrementing_counter
set_cmd = EVENTCOUNT/MODE
get_cmd = EVENTCOUNT/MODE

[Fft - Absolute]
section = Settings
group = Fft
label = Fft - Absolute
datatype = DOUBLE
tooltip = <html><body><p>Set to 1 to shift the frequencies in the FFT result so that the center frequency becomes the demodulation frequency rather than 0 Hz (when disabled).</p><p><b>FFT/ABSOLUTE</b></p></body></html>
set_cmd = FFT/ABSOLUTE
get_cmd = FFT/ABSOLUTE

[Fft - Window]
section = Settings
group = Fft
label = Fft - Window
datatype = COMBO
tooltip = <html><body><p>The FFT window function to use (default 1 = Hann). Depending on the application, it makes a huge difference which of the provided window functions is used. Please check the literature to find out the best trade off for your needs.</p><p><ul><li>rectangular: Rectangular</li><li>hann: Hann</li><li>hamming: Hamming</li><li>blackman_harris: Blackman Harris 4 term</li><li>exponential: Exponential (ring-down)</li><li>cos: Cosine (ring-down)</li><li>cos_squared: Cosine squared (ring-down)</li></ul></p><p><b>FFT/WINDOW</b></p></body></html>
cmd_def_1 = 0
combo_def_1 = rectangular
cmd_def_2 = 1
combo_def_2 = hann
cmd_def_3 = 2
combo_def_3 = hamming
cmd_def_4 = 3
combo_def_4 = blackman_harris
cmd_def_5 = 16
combo_def_5 = exponential
cmd_def_6 = 17
combo_def_6 = cos
cmd_def_7 = 18
combo_def_7 = cos_squared
set_cmd = FFT/WINDOW
get_cmd = FFT/WINDOW

[Findlevel]
section = Settings
group = Findlevel
label = Findlevel
datatype = BOOLEAN
tooltip = <html><body><p>Set to 1 to automatically find appropriate values of the trigger level and hysteresis based on the current triggernode signal value. The module sets findlevel to 0 once the values have been found and set.</p><p><b>FINDLEVEL</b></p></body></html>
set_cmd = FINDLEVEL
get_cmd = FINDLEVEL

[Flags]
section = Settings
group = Flags
label = Flags
datatype = DOUBLE
tooltip = <html><body><p>Record flags. FILL = 0x1: always enabled: ALIGN = 0x2: always enabled: THROW = 0x4: Throw if sample loss is detected: DETECT = 0x8: always enabled.</p><p><b>FLAGS</b></p></body></html>
set_cmd = FLAGS
get_cmd = FLAGS

[Forcetrigger]
section = Control
group = Forcetrigger
label = Forcetrigger
datatype = BOOLEAN
tooltip = <html><body><p>Set to 1 to force acquisition of a single trigger for all subscribed signal paths (when running in a triggered acquisition mode). The module immediately resets forcetrigger to 0 after it has been set to 1.</p><p><b>FORCETRIGGER</b></p></body></html>
set_cmd = FORCETRIGGER
get_cmd = FORCETRIGGER

[Grid - Cols]
section = Grid
group = Grid
label = Grid - Cols
datatype = DOUBLE
tooltip = <html><body><p>Specify the number of columns in the returned data grid (matrix). The data along the horizontal axis is resampled to the number of samples defined by grid/cols. The grid/mode parameter specifies how the data is sample onto the time, respectively frequency, grid.</p><p><b>GRID/COLS</b></p></body></html>
set_cmd = GRID/COLS
get_cmd = GRID/COLS

[Grid - Direction]
section = Grid
group = Grid
label = Grid - Direction
datatype = COMBO
tooltip = <html><body><p>The direction to organize data in the grid`s matrix.</p><p><ul><li>forward: Forward. The data in each row is ordered chronologically, e.g., the first data point in each row corresponds to the first timestamp in the trigger data.</li><li>reverse: Reverse. The data in each row is in reverse chronological order, e.g., the first data point in each row corresponds to the last timestamp in the trigger data.</li><li>bidirectional: Bidirectional. The ordering of the data alternates between Forward and Backward ordering from row-to-row. The first row is Forward ordered.</li></ul></p><p><b>GRID/DIRECTION</b></p></body></html>
cmd_def_1 = 0
combo_def_1 = forward
cmd_def_2 = 1
combo_def_2 = reverse
cmd_def_3 = 2
combo_def_3 = bidirectional
set_cmd = GRID/DIRECTION
get_cmd = GRID/DIRECTION

[Grid - Mode]
section = Grid
group = Grid
label = Grid - Mode
datatype = COMBO
tooltip = <html><body><p>Specify how the acquired data is sampled onto the matrix`s horizontal axis (time or frequency). Each trigger event becomes a row in the matrix and each trigger event`s subscribed data is sampled onto the grid defined by the number of columns (grid/cols) and resampled as specified with this parameter.</p><p><ul><li>nearest: Use the closest data point (nearest neighbour interpolation).</li><li>linear: Use linear interpolation.</li><li>4: Do not resample the data from the subscribed signal path(s) with the highest sampling rate: the horizontal axis data points are determined from the sampling rate and the value of grid/cols. Subscribed signals with a lower sampling rate are upsampled onto this grid using linear interpolation.</li></ul></p><p><b>GRID/MODE</b></p></body></html>
cmd_def_1 = 1
combo_def_1 = nearest
cmd_def_2 = 2
combo_def_2 = linear
cmd_def_3 = 4
combo_def_3 = 4
set_cmd = GRID/MODE
get_cmd = GRID/MODE

[Grid - Overwrite]
section = Grid
group = Grid
label = Grid - Overwrite
datatype = DOUBLE
tooltip = <html><body><p>If enabled, the module will return only one data chunk (grid) when it is running, which will then be overwritten by subsequent trigger events.</p><p><b>GRID/OVERWRITE</b></p></body></html>
set_cmd = GRID/OVERWRITE
get_cmd = GRID/OVERWRITE

[Grid - Repetitions]
section = Grid
group = Grid
label = Grid - Repetitions
datatype = DOUBLE
tooltip = <html><body><p>Number of statistical operations performed per grid. Only applied when the subscribed signal path is, for example, an average or a standard deviation.</p><p><b>GRID/REPETITIONS</b></p></body></html>
set_cmd = GRID/REPETITIONS
get_cmd = GRID/REPETITIONS

[Grid - Rowrepetition]
section = Grid
group = Grid
label = Grid - Rowrepetition
datatype = DOUBLE
tooltip = <html><body><p>Enable row-wise repetition. With row-wise repetition, each row is calculated from successive repetitions before starting the next row. With grid-wise repetition, the entire grid is calculated with each repetition.</p><p><b>GRID/ROWREPETITION</b></p></body></html>
set_cmd = GRID/ROWREPETITION
get_cmd = GRID/ROWREPETITION

[Grid - Rows]
section = Grid
group = Grid
label = Grid - Rows
datatype = DOUBLE
tooltip = <html><body><p>Specify the number of rows in the grid`s matrix. Each row is the data recorded from one trigger event.</p><p><b>GRID/ROWS</b></p></body></html>
set_cmd = GRID/ROWS
get_cmd = GRID/ROWS

[Grid - Waterfall]
section = Grid
group = Grid
label = Grid - Waterfall
datatype = DOUBLE
tooltip = <html><body><p>Set to 1 to enable waterfall mode: Move the data upwards upon each trigger event: the data from newest trigger event is placed in row 0.</p><p><b>GRID/WATERFALL</b></p></body></html>
set_cmd = GRID/WATERFALL
get_cmd = GRID/WATERFALL

[Historylength]
section = History
group = Historylength
label = Historylength
datatype = DOUBLE
tooltip = <html><body><p>Sets an upper limit for the number of data captures stored in the module.</p><p><b>HISTORYLENGTH</b></p></body></html>
set_cmd = HISTORYLENGTH
get_cmd = HISTORYLENGTH

[Holdoff - Count]
section = Settings
group = Holdoff
label = Holdoff - Count
datatype = DOUBLE
tooltip = <html><body><p>The number of skipped trigger events until the next trigger event is acquired.</p><p><b>HOLDOFF/COUNT</b></p></body></html>
set_cmd = HOLDOFF/COUNT
get_cmd = HOLDOFF/COUNT

[Holdoff - Time]
section = Settings
group = Holdoff
label = Holdoff - Time
datatype = DOUBLE
unit = Seconds
tooltip = <html><body><p>The hold-off time before trigger acquisition is re-armed again. A hold-off time smaller than the duration will produce overlapped trigger frames.</p><p><b>HOLDOFF/TIME</b></p></body></html>
set_cmd = HOLDOFF/TIME
get_cmd = HOLDOFF/TIME

[Hysteresis]
section = Settings
group = Hysteresis
label = Hysteresis
datatype = DOUBLE
tooltip = <html><body><p>If non-zero, hysteresis specifies an additional trigger criteria to level in the trigger condition. The trigger signal must first go higher, respectively lower, than the hysteresis value and then the trigger level for positive, respectively negative edge triggers. The hysteresis value is applied below the trigger level for positive trigger edge selection. It is applied above for negative trigger edge selection, and on both sides for triggering on both edges. A non-zero hysteresis value is helpful to trigger on the correct edge in the presence of noise to avoid false positives.</p><p><b>HYSTERESIS</b></p></body></html>
set_cmd = HYSTERESIS
get_cmd = HYSTERESIS

[Level]
section = Settings
group = Level
label = Level
datatype = DOUBLE
tooltip = <html><body><p>The trigger level value.</p><p><b>LEVEL</b></p></body></html>
set_cmd = LEVEL
get_cmd = LEVEL

[Preview]
section = Settings
group = Preview
label = Preview
datatype = BOOLEAN
tooltip = <html><body><p>If set to 1, enable the data of an incomplete trigger to be read. Useful for long trigger durations (or FFTs) by providing access to the intermediate data.</p><p><b>PREVIEW</b></p></body></html>
set_cmd = PREVIEW
get_cmd = PREVIEW

[Pulse - Max]
section = Settings
group = Pulse
label = Pulse - Max
datatype = DOUBLE
unit = Seconds
tooltip = <html><body><p>The maximum pulse width to trigger on when using a pulse trigger.</p><p><b>PULSE/MAX</b></p></body></html>
set_cmd = PULSE/MAX
get_cmd = PULSE/MAX

[Pulse - Min]
section = Settings
group = Pulse
label = Pulse - Min
datatype = DOUBLE
unit = Seconds
tooltip = <html><body><p>The minimum pulse width to trigger on when using a pulse trigger.</p><p><b>PULSE/MIN</b></p></body></html>
set_cmd = PULSE/MIN
get_cmd = PULSE/MIN

[Refreshrate]
section = Settings
group = Refreshrate
label = Refreshrate
datatype = DOUBLE
unit = Hz
tooltip = <html><body><p>Set the maximum refresh rate of updated data in the returned grid. The actual refresh rate depends on other factors such as the hold-off time and duration.</p><p><b>REFRESHRATE</b></p></body></html>
set_cmd = REFRESHRATE
get_cmd = REFRESHRATE

[Save - Csvlocale]
section = History
group = Save
label = Save - Csvlocale
datatype = STRING
tooltip = <html><body><p>The locale to use for the decimal point character and digit grouping character for numerical values in CSV files: `C`: Dot for the decimal point and no digit grouping (default): `` (empty string): Use the symbols set in the language and region settings of the computer.</p><p><b>SAVE/CSVLOCALE</b></p></body></html>
set_cmd = SAVE/CSVLOCALE
get_cmd = SAVE/CSVLOCALE

[Save - Csvseparator]
section = History
group = Save
label = Save - Csvseparator
datatype = STRING
tooltip = <html><body><p>The character to use as CSV separator when saving files in this format.</p><p><b>SAVE/CSVSEPARATOR</b></p></body></html>
set_cmd = SAVE/CSVSEPARATOR
get_cmd = SAVE/CSVSEPARATOR

[Save - Directory]
section = History
group = Save
label = Save - Directory
datatype = STRING
tooltip = <html><body><p>The base directory where files are saved.</p><p><b>SAVE/DIRECTORY</b></p></body></html>
set_cmd = SAVE/DIRECTORY
get_cmd = SAVE/DIRECTORY

[Save - Fileformat]
section = History
group = Save
label = Save - Fileformat
datatype = COMBO
tooltip = <html><body><p>The format of the file for saving data.</p><p><ul><li>mat: MATLAB</li><li>csv: CSV</li><li>zview: ZView (Impedance data only)</li><li>sxm: SXM (Image format)</li><li>hdf5: HDF5</li></ul></p><p><b>SAVE/FILEFORMAT</b></p></body></html>
cmd_def_1 = 0
combo_def_1 = mat
cmd_def_2 = 1
combo_def_2 = csv
cmd_def_3 = 2
combo_def_3 = zview
cmd_def_4 = 3
combo_def_4 = sxm
cmd_def_5 = 4
combo_def_5 = hdf5
set_cmd = SAVE/FILEFORMAT
get_cmd = SAVE/FILEFORMAT

[Save - Filename]
section = History
group = Save
label = Save - Filename
datatype = STRING
tooltip = <html><body><p>Defines the sub-directory where files are saved. The actual sub-directory has this name with a sequence count (per save) appended, e.g. daq_000.</p><p><b>SAVE/FILENAME</b></p></body></html>
set_cmd = SAVE/FILENAME
get_cmd = SAVE/FILENAME

[Save - Save]
section = History
group = Save
label = Save - Save
datatype = BOOLEAN
tooltip = <html><body><p>Initiate the saving of data to file. The saving is done in the background. When the save has finished, the module resets this parameter to 0.</p><p><b>SAVE/SAVE</b></p></body></html>
set_cmd = SAVE/SAVE
get_cmd = SAVE/SAVE

[Save - Saveonread]
section = History
group = Save
label = Save - Saveonread
datatype = BOOLEAN
tooltip = <html><body><p>Automatically save the data to file immediately before reading out the data from the module using the read() command. Set this parameter to 1 if you want to save data to file when running the module continuously and performing intermediate reads.</p><p><b>SAVE/SAVEONREAD</b></p></body></html>
set_cmd = SAVE/SAVEONREAD
get_cmd = SAVE/SAVEONREAD

[Spectrum - Autobandwidth]
section = Settings
group = Spectrum
label = Spectrum - Autobandwidth
datatype = DOUBLE
tooltip = <html><body><p>Set to 1 to initiate automatic adjustment of the subscribed demodulator bandwidths to obtain optimal alias rejection for the selected frequency span which is equivalent to the sampling rate. The FFT mode has to be enabled (spectrum/enable) and the module has to be running for this function to take effect. The module resets spectrum/autobandwidth to 0 when the adjustment has finished.</p><p><b>SPECTRUM/AUTOBANDWIDTH</b></p></body></html>
set_cmd = SPECTRUM/AUTOBANDWIDTH
get_cmd = SPECTRUM/AUTOBANDWIDTH

[Spectrum - Enable]
section = Settings
group = Spectrum
label = Spectrum - Enable
datatype = BOOLEAN
tooltip = <html><body><p>Enables the FFT mode of the data Acquisition module, in addition to time domain data acquisition. Note that when the FFT mode is enabled, the grid/cols parameter value is rounded down to the nearest binary power.</p><p><b>SPECTRUM/ENABLE</b></p></body></html>
set_cmd = SPECTRUM/ENABLE
get_cmd = SPECTRUM/ENABLE

[Spectrum - Frequencyspan]
section = Settings
group = Spectrum
label = Spectrum - Frequencyspan
datatype = DOUBLE
tooltip = <html><body><p>Sets the desired frequency span of the FFT.</p><p><b>SPECTRUM/FREQUENCYSPAN</b></p></body></html>
set_cmd = SPECTRUM/FREQUENCYSPAN
get_cmd = SPECTRUM/FREQUENCYSPAN

[Spectrum - Overlapped]
section = Settings
group = Spectrum
label = Spectrum - Overlapped
datatype = DOUBLE
tooltip = <html><body><p>Enables overlapping FFTs. If disabled (0), FFTs are performed on distinct abutting data sets. If enabled, the data sets of successive FFTs overlap based on the defined refresh rate.</p><p><b>SPECTRUM/OVERLAPPED</b></p></body></html>
set_cmd = SPECTRUM/OVERLAPPED
get_cmd = SPECTRUM/OVERLAPPED

[Triggered]
section = Control
group = Triggered
label = Triggered
datatype = BOOLEAN
tooltip = <html><body><p>Indicates whether the module has recently triggered: 1=Yes, 0=No.</p><p><b>TRIGGERED</b></p></body></html>
get_cmd = TRIGGERED

[Triggernode]
section = Settings
group = Triggernode
label = Triggernode
datatype = STRING
tooltip = <html><body><p>The node path and signal that should be used for triggering, the node path and signal should be separated by a dot (.), e.g. /DEV.../DEMODS/0/SAMPLE.X.</p><p><b>TRIGGERNODE</b></p></body></html>
set_cmd = TRIGGERNODE
get_cmd = TRIGGERNODE

[Type]
section = Settings
group = Type
label = Type
datatype = COMBO
tooltip = <html><body><p>Specifies how the module acquires data.</p><p><ul><li>continuous: Continuous acquisition (trigger off).</li><li>analog_edge_trigger: Analog edge trigger.</li><li>digital_trigger: Digital trigger mode (on DIO source).</li><li>analog_pulse_trigger: Analog pulse trigger.</li><li>analog_tracking_trigger: Analog tracking trigger.</li><li>change_trigger: Change trigger.</li><li>hardware_trigger: Hardware trigger (on trigger line source).</li><li>pulse_tracking_trigger: Pulse tracking trigger, see also bandwidth.</li><li>event_count_trigger: Event count trigger (on pulse counter source).</li></ul></p><p><b>TYPE</b></p></body></html>
cmd_def_1 = 0
combo_def_1 = continuous
cmd_def_2 = 1
combo_def_2 = analog_edge_trigger
cmd_def_3 = 2
combo_def_3 = digital_trigger
cmd_def_4 = 3
combo_def_4 = analog_pulse_trigger
cmd_def_5 = 4
combo_def_5 = analog_tracking_trigger
cmd_def_6 = 5
combo_def_6 = change_trigger
cmd_def_7 = 6
combo_def_7 = hardware_trigger
cmd_def_8 = 7
combo_def_8 = pulse_tracking_trigger
cmd_def_9 = 8
combo_def_9 = event_count_trigger
set_cmd = TYPE
get_cmd = TYPE

[General settings]
name = Zurich Instruments DAQ_Module
version = 22.02#0.3.0#0.1
driver_path = Zurich_Instruments_DAQ_Module
support_arm = True
support_hardware_loop = True
interface = Other
startup = Do nothing

[Clear_Results]
label = Clear_Results
group = Clear_Results
section = Control
set_cmd = clear_results
get_cmd = clear_results
datatype = BOOLEAN

[Result - 0]
label = Result - 0
group = Result
section = Control
set_cmd = result/0
get_cmd = result/0
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 1]
label = Result - 1
group = Result
section = Control
set_cmd = result/1
get_cmd = result/1
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 2]
label = Result - 2
group = Result
section = Control
set_cmd = result/2
get_cmd = result/2
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 3]
label = Result - 3
group = Result
section = Control
set_cmd = result/3
get_cmd = result/3
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 4]
label = Result - 4
group = Result
section = Control
set_cmd = result/4
get_cmd = result/4
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 5]
label = Result - 5
group = Result
section = Control
set_cmd = result/5
get_cmd = result/5
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 6]
label = Result - 6
group = Result
section = Control
set_cmd = result/6
get_cmd = result/6
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 7]
label = Result - 7
group = Result
section = Control
set_cmd = result/7
get_cmd = result/7
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 8]
label = Result - 8
group = Result
section = Control
set_cmd = result/8
get_cmd = result/8
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 9]
label = Result - 9
group = Result
section = Control
set_cmd = result/9
get_cmd = result/9
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 10]
label = Result - 10
group = Result
section = Control
set_cmd = result/10
get_cmd = result/10
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 11]
label = Result - 11
group = Result
section = Control
set_cmd = result/11
get_cmd = result/11
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 12]
label = Result - 12
group = Result
section = Control
set_cmd = result/12
get_cmd = result/12
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 13]
label = Result - 13
group = Result
section = Control
set_cmd = result/13
get_cmd = result/13
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 14]
label = Result - 14
group = Result
section = Control
set_cmd = result/14
get_cmd = result/14
datatype = VECTOR
x_name = Length
x_unit = Sample

[Result - 15]
label = Result - 15
group = Result
section = Control
set_cmd = result/15
get_cmd = result/15
datatype = VECTOR
x_name = Length
x_unit = Sample

[Signal - 0]
label = Signal - 0
group = Signal
section = Control
set_cmd = signal/0
get_cmd = signal/0
datatype = STRING

[Signal - 1]
label = Signal - 1
group = Signal
section = Control
set_cmd = signal/1
get_cmd = signal/1
datatype = STRING

[Signal - 2]
label = Signal - 2
group = Signal
section = Control
set_cmd = signal/2
get_cmd = signal/2
datatype = STRING

[Signal - 3]
label = Signal - 3
group = Signal
section = Control
set_cmd = signal/3
get_cmd = signal/3
datatype = STRING

[Signal - 4]
label = Signal - 4
group = Signal
section = Control
set_cmd = signal/4
get_cmd = signal/4
datatype = STRING

[Signal - 5]
label = Signal - 5
group = Signal
section = Control
set_cmd = signal/5
get_cmd = signal/5
datatype = STRING

[Signal - 6]
label = Signal - 6
group = Signal
section = Control
set_cmd = signal/6
get_cmd = signal/6
datatype = STRING

[Signal - 7]
label = Signal - 7
group = Signal
section = Control
set_cmd = signal/7
get_cmd = signal/7
datatype = STRING

[Signal - 8]
label = Signal - 8
group = Signal
section = Control
set_cmd = signal/8
get_cmd = signal/8
datatype = STRING

[Signal - 9]
label = Signal - 9
group = Signal
section = Control
set_cmd = signal/9
get_cmd = signal/9
datatype = STRING

[Signal - 10]
label = Signal - 10
group = Signal
section = Control
set_cmd = signal/10
get_cmd = signal/10
datatype = STRING

[Signal - 11]
label = Signal - 11
group = Signal
section = Control
set_cmd = signal/11
get_cmd = signal/11
datatype = STRING

[Signal - 12]
label = Signal - 12
group = Signal
section = Control
set_cmd = signal/12
get_cmd = signal/12
datatype = STRING

[Signal - 13]
label = Signal - 13
group = Signal
section = Control
set_cmd = signal/13
get_cmd = signal/13
datatype = STRING

[Signal - 14]
label = Signal - 14
group = Signal
section = Control
set_cmd = signal/14
get_cmd = signal/14
datatype = STRING

[Signal - 15]
label = Signal - 15
group = Signal
section = Control
set_cmd = signal/15
get_cmd = signal/15
datatype = STRING

